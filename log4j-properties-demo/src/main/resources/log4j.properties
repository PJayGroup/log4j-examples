# ================================  Comments  ==========================================
# Source: For finding more info on issues run app with VM arg "-Dlog4j.debug=true" http://stackoverflow.com/questions/8913099/java-application-getting-log4j-to-work-within-eclipse-environment
# Source: For all configuration and setup:: http://www.tutorialspoint.com/log4j/index.htm
# Source: For logging levels(Based on level, different logging methods will be enabled of disabled, can be done at java code level using "log.setLevel(Level.WARN)"):: http://www.tutorialspoint.com/log4j/log4j_logging_levels.htm
# Source: For configuration and different file appenders:: http://www.tutorialspoint.com/log4j/log4j_configuration.htm
# Main file configuration starts with "log4j.rootLogger"

# Define the root logger with File and Console appender (This means logging is done to file and Console)
log4j.rootLogger = DEBUG, FILE, Console

# ================================  Comments  ==========================================
# DEBUG will give access to logger methods DEBUG and above(i.e., DEBUG to OFF)"ALL < DEBUG < INFO < WARN < ERROR < FATAL < OFF"
# INFO will give access to logger methods INFO and above(i.e., INFO to OFF (DEBUG is not allowed))"ALL < DEBUG < INFO < WARN < ERROR < FATAL < OFF"

# ================================  Comments  ==========================================
#log4j.appender.FILE = org.apache.log4j.FileAppender
# Had to comment because of below warnings
# log4j:WARN No such property [maxBackupIndex] in org.apache.log4j.FileAppender.
# log4j:WARN No such property [maxFileSize] in org.apache.log4j.FileAppender.

# Define file appender
log4j.appender.FILE = org.apache.log4j.RollingFileAppender
log4j.appender.FILE.File = C:\\JavaWorkspace\\Log4jProj\\logs\\logging.out

# ================================  Comments  ==========================================
# Redirect to Tomcat logs folder "log4j.appender.file.File=${catalina.home}/logs/logging.log"
# Can use your own directory in properties like "logdir = C:\\logs\\log4j" and use "log4j.appender.FILE.File=${logdir}\\logging.out"
# Unix or Linux "logdir = /usr/home/log4j" and use "log4j.appender.FILE.File=${logdir}/log.out"

# Define the layout, logger file size and backup index for file appender
log4j.appender.FILE.MaxFileSize = 10MB
log4j.appender.FILE.MaxBackupIndex = 10
log4j.appender.FILE.layout = org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}::%L - %m%n

# ================================  Comments  ==========================================
# Source: http://www.mkyong.com/logging/log4j-hello-world-example/
# output will be in this format "2014-07-02 20:52:39 DEBUG className::200 - This is debug message"
# Let break it down :
# %d{yyyy-MM-dd HH:mm:ss} = Date and time format, refer to SimpleDateFormat JavaDoc.
# %-5p = The logging priority, like DEBUG or ERROR. The -5 is optional, for the pretty print format.
# %c{1} = The logging name we set via getLogger(), refer to log4j PatternLayout guide. Depending on number in {} we get the print of package name starting from Class name to the starting of package
# %L = The line number from where the logging request.
# %m%n = The message to log and line break.

# Define the layout for console appender
log4j.appender.Console = org.apache.log4j.ConsoleAppender
log4j.appender.Console.layout = org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}::%L - %m%n

# ================================  Comments  ==========================================
# Applying logger separately for different packages in project
# Source: http://www.dzone.com/tutorials/java/log4j/log4j-file-appender-example-1.html
